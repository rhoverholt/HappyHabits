[{"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/index.js":"1","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/App.js":"2","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/reportWebVitals.js":"3","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/pages/Home.js":"4","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/pages/Signup.js":"5","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/pages/Login.js":"6","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/pages/Dashboard.js":"7","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/pages/Habit.js":"8","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/components/Navbar/Navbar.js":"9","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/components/Header/index.js":"10","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/components/Footer/index.js":"11","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/utils/mutations.js":"12","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/utils/queries.js":"13","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/utils/auth.js":"14","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/components/Habit/index.js":"15","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/components/Habit/taskDateFuns.js":"16","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/components/PlotChart/index.js":"17"},{"size":500,"mtime":1649684153079,"results":"18","hashOfConfig":"19"},{"size":2159,"mtime":1649983910092,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1649684153081,"results":"21","hashOfConfig":"19"},{"size":297,"mtime":1649811692305,"results":"22","hashOfConfig":"19"},{"size":2665,"mtime":1649684153080,"results":"23","hashOfConfig":"19"},{"size":2531,"mtime":1649978485304,"results":"24","hashOfConfig":"19"},{"size":783,"mtime":1649986390483,"results":"25","hashOfConfig":"19"},{"size":10888,"mtime":1649990843310,"results":"26","hashOfConfig":"19"},{"size":1088,"mtime":1649811421951,"results":"27","hashOfConfig":"19"},{"size":1067,"mtime":1649986390523,"results":"28","hashOfConfig":"19"},{"size":800,"mtime":1649684153076,"results":"29","hashOfConfig":"19"},{"size":3909,"mtime":1649986390485,"results":"30","hashOfConfig":"19"},{"size":1266,"mtime":1649684153082,"results":"31","hashOfConfig":"19"},{"size":1868,"mtime":1649684153081,"results":"32","hashOfConfig":"19"},{"size":5246,"mtime":1649991957613,"results":"33","hashOfConfig":"19"},{"size":1351,"mtime":1649986390480,"results":"34","hashOfConfig":"19"},{"size":647,"mtime":1649988766645,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"5olmm1",{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/index.js",[],["73","74"],"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/App.js",[],"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/reportWebVitals.js",[],"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/pages/Home.js",[],"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/pages/Signup.js",[],"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/pages/Login.js",[],"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/pages/Dashboard.js",[],"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/pages/Habit.js",["75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91"],"import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { useParams } from 'react-router-dom';\nimport {QUERY_ME} from '../utils/queries';\n\nimport {CREATE_HABIT, REMOVE_TASK, CREATE_TASK, UPDATE_HABIT, UPDATE_TASK} from '../utils/mutations';\nimport './habit.css';\n\n\nimport Auth from \"../utils/auth\";\nimport context from 'react-bootstrap/esm/AccordionContext';\n\nconst Habit = () => {\nconst { loading, data } = useQuery(QUERY_ME);\nlet { id } = useParams();\nlet visibility = \"btn-block btn-danger Visible btn btn-primary\"\nif(!id){\n    visibility = \"btn-block btn-danger Hidden btn btn-primary\"\n\n} \n// let myTaskIndex = '';\n\n\nconst [createHabit, { error, habit }] = useMutation(CREATE_HABIT);\nconst [createTask, {  task }] = useMutation(CREATE_TASK);\nconst [removeTask, {}] = useMutation(REMOVE_TASK);\nconst [updateHabit, {}] = useMutation(UPDATE_HABIT);\nconst [updateTask, {}] = useMutation(UPDATE_TASK);\nconst [formState, setFormState] =  useState({habitTitle:``,\n        notes:``,\n        description:``,\n        frequency:``,\n        startDate:``,\n        endDate:``,\n        taskIndex:``});\n\n\nlet userData= data?.me || {};\nlet addTaskForm=``;\n\n\n\nuseEffect(() => {\n    if(!data){\n        return;\n    }\n    userData = data?.me || {};\n setFormState(\n        (id)?\n        // {habitTitle: userData.habits[id].title,\n        // description: userData.habits[id].tasks[taskId].description,\n        // frequency:userData.habits[id].tasks[taskId].frequency,\n        // startDate:userData.habits[id].tasks[taskId].startDate,\n        // endDate: userData.habits[id].tasks[taskId].endDate} : (id && taskId==='')?\n        {habitTitle:userData.habits[id].title,\n        notes:userData.habits[id].notes,\n        description:``,\n        frequency:``,\n        startDate:``,\n        endDate:``,\n        taskIndex: ``} :\n            {habitTitle:``,\n            notes:``,\n            description:``,\n            frequency:``,\n            startDate:``,\n            endDate:``,\n            taskIndex: ``}\n    )}, [data]);\n\n\n    function cleanDate(dateTime) {\n      let d = new Date(parseInt(dateTime));\n      return new Date( // convert input date-time to a simple date with no time\n        d.getMonth() + 1 + \"/\" + d.getDate() + \"/\" + d.getFullYear()\n      );\n    }\n\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  const handleHabitFormSubmit = async (event) => {\n    event.preventDefault();\n    const habitToSave = {\n    title:formState.habitTitle,\n    notes:formState.notes,\n}\n\nif (!id){\n    try {\n        const { habit } = await createHabit({\n          variables: { habit: habitToSave },\n        });\n        id = data.me.habits.length;\n        document.location.replace(`/habit/${id}`);\n\n  \n      } catch (e) {\n        console.error(e);\n      }\n}\nelse if(id){\n\n    try {\n        const { habit } = await updateHabit({id,\n          variables: { \n              index: id,\n              habit: habitToSave },\n        });\n  \n      } catch (e) {\n        console.error(e);\n      }\n}\n\n  };\n\n  //Create a task\n  const handleTaskFormSubmit = async (event) => {\n    event.preventDefault();\n    const taskToSave = {\n        description:formState.description,\n        frequency:formState.frequency,\n        startDate:formState.startDate,\n        endDate:formState.endDate,\n\n    }\n    let myTaskIndex = formState.taskIndex;\n    let myTaskIndexStr = JSON.stringify(myTaskIndex);\n\n\nif(myTaskIndexStr===`\"\"`){\n\n  try {\n    const { task } = await createTask({\n      variables: { \n          index: id,\n          task:taskToSave},\n    });\n\n  } catch (e) {\n    console.error(e);\n  }\n\n}\nelse {\n\n  try {\n    const { task } = await updateTask({\n      variables: { \n          index: id,\n          taskIndex: myTaskIndexStr,\n          task:taskToSave},\n    });\n\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nconsole.log(myTaskIndexStr);\n\nsetFormState(\n        {\n        description:``,\n        frequency:``,\n        startDate:``,\n        endDate:``,\n        taskIndex: ``} );\n\n  \n\n  if(document.getElementById(\"addTaskForm\").className=\"Visible\"){\n    document.getElementById(\"addTaskForm\").setAttribute(\"class\",\"Hidden\");\n    visibility = \"btn-block btn-danger Visible btn btn-primary\";\n    document.getElementById(\"newTaskBtn\").setAttribute(\"class\",visibility);\n\n};\n\n        };\n\n\n  const handleDeleteTask = async (taskIndex) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n    // const taskIndexString = JSON.parse(taskIndex);\n    if (!token) {\n      return false;\n    }\n\n    try {\n\n      await removeTask({variables: {\n        index: id,\n        taskIndex:taskIndex}})\n\n\n      // upon success, remove task from page\n    //   removeTaskId(taskId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleEditTask = async (clickedTaskIndex, taskDesc, taskFreq, taskStart, taskEnd) => {\n\n    let updatedStart = cleanDate(taskStart).toLocaleDateString('en-CA');\n    let updatedEnd = cleanDate(taskEnd).toLocaleDateString('en-CA');\n    // myTaskIndex=clickedTaskIndex;\n\n    console.log(clickedTaskIndex)\n\n\n\n    setFormState(\n      {\n      description:taskDesc,\n      frequency:taskFreq,\n      startDate:updatedStart,\n      endDate:updatedEnd,\n      taskIndex: clickedTaskIndex} );\n\n      const thisTaskToSave = {\n        description:formState.description,\n        frequency:formState.frequency,\n        startDate:formState.startDate,\n        endDate:formState.endDate,\n        taskIndex: formState.taskIndex\n\n    }\n\n      console.log(thisTaskToSave);\n\n      // addTaskForm.setAttribute(\"class\",\"Visible\");\n      visibility = \"btn-block btn-danger Hidden btn btn-primary\"\n      document.getElementById(\"newTaskBtn\").setAttribute(\"class\",visibility);\n      let addTaskForm = document.getElementById(\"addTaskForm\");\n      addTaskForm.setAttribute(\"class\",\"Visible\");\n\n\n\n  };\n\n\n  const addNewTask = () =>{\n    let addTaskForm = document.getElementById(\"addTaskForm\");\n    addTaskForm.setAttribute(\"class\",\"Visible\");\n    visibility = \"btn-block btn-danger Hidden btn btn-primary\"\n    document.getElementById(\"newTaskBtn\").setAttribute(\"class\",visibility);\n\n    setFormState(\n      {\n      description:``,\n      frequency:``,\n      startDate:``,\n      endDate:``,\n      taskIndex: ``} );\n\n  };\n  \n\n  if (loading) {\n\n    return <div>Loading...</div>;\n    \n  }\n\n\nreturn (\n<>\n\n<form className=\"habit-form\" onSubmit={handleHabitFormSubmit}>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Habit Title\"\n                  name=\"habitTitle\"\n                  type=\"text\"\n                  required\n                  value={formState.habitTitle}\n                  onChange={handleChange}\n                />\n                <button\n                  className=\"btn btn-block btn-primary\" id=\"save-habit\"\n                  style={{ cursor: 'pointer' }}\n                  type=\"submit\"\n                >\n                  Save Habit\n                </button>\n              </form>\n              \n              <Button id='newTaskBtn' className={visibility} onClick={() => addNewTask()}>\n                    Add New Task\n                </Button>\n\n            <div id='addTaskForm' className=\"Hidden\">\n                <form onSubmit={handleTaskFormSubmit}>\n                    <input\n                    className=\"form-input\"\n                    placeholder=\"Task Description\"\n                    name=\"description\"\n                    type=\"text\"\n                    required\n                    value={formState.description}\n                    onChange={handleChange}\n                    />\n                    <select \n                    className=\"form-select\"\n                    name=\"frequency\"\n                    value={formState.frequency} \n                    onChange={handleChange}>\n                      <option value=\"Daily\">Daily</option>\n                      <option value=\"Weekly\">Weekly</option>\n                    </select>\n                    <input\n                    className=\"form-input\"\n                    placeholder=\"Task Start Date\"\n                    name=\"startDate\"\n                    type=\"date\"\n                    required\n                    value={formState.startDate}\n                    onChange={handleChange}\n                    />\n                    <input\n                    className=\"form-input\"\n                    placeholder=\"TaskEndDate\"\n                    name=\"endDate\"\n                    type=\"date\"\n                    required\n                    value={formState.endDate}\n                    onChange={handleChange}\n                    />\n                    <input\n                    className=\"Hidden form-input\"\n                    placeholder=\"taskIndex\"\n                    name=\"taskIndex\"\n                    type=\"text\"\n                    value={formState.taskIndex}\n                    onChange={handleChange}\n                    />\n                    <button\n                    id=\"taskBtn\"\n                    className=\"btn btn-block btn-primary\"\n                    style={{ cursor: 'pointer' }}\n                    type=\"submit\"\n                    >\n                    Save Task\n                    </button>\n                    </form>\n                </div>\n \n                <div id=\"notesForm\" className=\"Visible\" >\n                <form id=\"notesEntry\" onSubmit={handleHabitFormSubmit}>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"notes\"\n                  name=\"notes\"\n                  type=\"message\"\n                  value={formState.notes}\n                  onChange={handleChange}\n                />\n                <button\n                  className=\"btn btn-block btn-primary\" id=\"saveMe\"\n                  style={{ cursor: 'pointer' }}\n                  type=\"submit\"\n                >\n                  Save Entry\n                </button>\n              </form>\n              </div>\n            {userData.habits[id]?.tasks.map((task,index) => {\n            return (\n\n\n              <Card key={index} border='dark'>\n                <Card.Body className=\"whattocall\">\n                  <Card.Title className=\"card-title\" >{task.description}</Card.Title>\n                  <Button className='btn-block btn-danger' id=\"edit\" onClick={() => handleEditTask(index, task.description, task.frequency, task.startDate, task.endDate)}>\n                    Edit\n                  </Button>\n                  <Button className='btn-block btn-danger' id=\"delete\" onClick={() => handleDeleteTask(index)}>\n                    Delete\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n\n\n\n</>\n  \n  );\n    \n};\n\nexport default Habit;","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/components/Navbar/Navbar.js",[],"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/components/Header/index.js",["92"],"import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./header.css\";\nimport Auth from \"../../utils/auth\";\n\nconst Header = () => {\n  const logout = (event) => {\n    event.preventDefault();\n    Auth.logout();\n  };\n\n  return (\n    <header className=\"container header__container\">\n      <div className=\"container flex-row justify-space-between-lg justify-center align-center\">\n        <div>\n          <h5>Welcome to</h5>\n          <Link className=\"text-light\" to=\"/\">\n            <h1 className=\"m-0\">Happy Habits</h1>\n          </Link>\n          <p className=\"m-0\">Little changes, big results.</p>\n        </div>\n        <div className=\"cta\">\n          {Auth.loggedIn() ? (\n            \"\"\n          ) : (\n            <>\n              <Link className=\"btn\" id=\"loginbtn\" to=\"/login\">\n                Login\n              </Link>\n              <Link className=\"btn btn-primary\" id=\"signup\" to=\"/signup\">\n                Signup\n              </Link>\n            </>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/components/Footer/index.js",[],"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/utils/mutations.js",[],"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/utils/queries.js",[],"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/utils/auth.js",[],"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/components/Habit/index.js",[],"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/components/Habit/taskDateFuns.js",[],"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/components/PlotChart/index.js",[],{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":3,"column":10,"nodeType":"99","messageId":"100","endLine":3,"endColumn":19},{"ruleId":"97","severity":1,"message":"101","line":3,"column":21,"nodeType":"99","messageId":"100","endLine":3,"endColumn":30},{"ruleId":"97","severity":1,"message":"102","line":3,"column":32,"nodeType":"99","messageId":"100","endLine":3,"endColumn":43},{"ruleId":"97","severity":1,"message":"103","line":12,"column":8,"nodeType":"99","messageId":"100","endLine":12,"endColumn":15},{"ruleId":"97","severity":1,"message":"104","line":25,"column":23,"nodeType":"99","messageId":"100","endLine":25,"endColumn":28},{"ruleId":"97","severity":1,"message":"105","line":25,"column":30,"nodeType":"99","messageId":"100","endLine":25,"endColumn":35},{"ruleId":"97","severity":1,"message":"106","line":26,"column":23,"nodeType":"99","messageId":"100","endLine":26,"endColumn":27},{"ruleId":"107","severity":1,"message":"108","line":27,"column":20,"nodeType":"109","messageId":"110","endLine":27,"endColumn":22},{"ruleId":"107","severity":1,"message":"108","line":28,"column":21,"nodeType":"109","messageId":"110","endLine":28,"endColumn":23},{"ruleId":"107","severity":1,"message":"108","line":29,"column":20,"nodeType":"109","messageId":"110","endLine":29,"endColumn":22},{"ruleId":"97","severity":1,"message":"111","line":40,"column":5,"nodeType":"99","messageId":"100","endLine":40,"endColumn":16},{"ruleId":"112","severity":1,"message":"113","line":48,"column":16,"nodeType":"114","endLine":48,"endColumn":30},{"ruleId":"97","severity":1,"message":"105","line":99,"column":17,"nodeType":"99","messageId":"100","endLine":99,"endColumn":22},{"ruleId":"97","severity":1,"message":"105","line":113,"column":17,"nodeType":"99","messageId":"100","endLine":113,"endColumn":22},{"ruleId":"97","severity":1,"message":"106","line":143,"column":13,"nodeType":"99","messageId":"100","endLine":143,"endColumn":17},{"ruleId":"97","severity":1,"message":"106","line":157,"column":13,"nodeType":"99","messageId":"100","endLine":157,"endColumn":17},{"ruleId":"115","severity":1,"message":"116","line":181,"column":6,"nodeType":"117","messageId":"118","endLine":181,"endColumn":64},{"ruleId":"97","severity":1,"message":"119","line":7,"column":9,"nodeType":"99","messageId":"100","endLine":7,"endColumn":15},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"no-unused-vars","'Jumbotron' is defined but never used.","Identifier","unusedVar","'Container' is defined but never used.","'CardColumns' is defined but never used.","'context' is defined but never used.","'error' is assigned a value but never used.","'habit' is assigned a value but never used.","'task' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'addTaskForm' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'userData' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","LogicalExpression","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'logout' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]