[{"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/index.js":"1","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/App.js":"2","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/reportWebVitals.js":"3","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/pages/Home.js":"4","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/pages/Signup.js":"5","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/pages/Login.js":"6","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/pages/Dashboard.js":"7","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/pages/Habit.js":"8","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/components/Navbar/Navbar.js":"9","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/components/Header/index.js":"10","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/components/Footer/index.js":"11","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/utils/mutations.js":"12","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/utils/queries.js":"13","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/utils/auth.js":"14","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/components/Habit/index.js":"15","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/components/Task/index.js":"16"},{"size":500,"mtime":1649684153079,"results":"17","hashOfConfig":"18"},{"size":2093,"mtime":1649684153074,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1649684153081,"results":"20","hashOfConfig":"18"},{"size":238,"mtime":1649686077920,"results":"21","hashOfConfig":"18"},{"size":2665,"mtime":1649684153080,"results":"22","hashOfConfig":"18"},{"size":2519,"mtime":1649686418393,"results":"23","hashOfConfig":"18"},{"size":633,"mtime":1649694576534,"results":"24","hashOfConfig":"18"},{"size":8448,"mtime":1649684153080,"results":"25","hashOfConfig":"18"},{"size":1183,"mtime":1649692688346,"results":"26","hashOfConfig":"18"},{"size":1247,"mtime":1649684153077,"results":"27","hashOfConfig":"18"},{"size":800,"mtime":1649684153076,"results":"28","hashOfConfig":"18"},{"size":3310,"mtime":1649684153082,"results":"29","hashOfConfig":"18"},{"size":1266,"mtime":1649684153082,"results":"30","hashOfConfig":"18"},{"size":1868,"mtime":1649684153081,"results":"31","hashOfConfig":"18"},{"size":671,"mtime":1649684153077,"results":"32","hashOfConfig":"18"},{"size":1046,"mtime":1649684153078,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"5olmm1",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/index.js",[],["68","69"],"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/App.js",[],"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/reportWebVitals.js",[],"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/pages/Home.js",[],"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/pages/Signup.js",[],"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/pages/Login.js",[],"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/pages/Dashboard.js",[],"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/pages/Habit.js",["70","71","72","73","74","75","76","77","78","79","80","81","82","83"],"import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { useParams } from 'react-router-dom';\nimport {QUERY_ME} from '../utils/queries';\nimport {CREATE_HABIT, REMOVE_TASK, CREATE_TASK, UPDATE_HABIT} from '../utils/mutations';\n\nimport Auth from \"../utils/auth\";\n\nconst Habit = () => {\nconst { loading, data } = useQuery(QUERY_ME);\nlet { id } = useParams();\nlet visibility = \"btn-block btn-danger Visible btn btn-primary\"\nif(!id){\n    visibility = \"btn-block btn-danger Hidden btn btn-primary\"\n\n} \n\nconst [createHabit, { error, habit }] = useMutation(CREATE_HABIT);\nconst [createTask, {  task }] = useMutation(CREATE_TASK);\nconst [removeTask, {}] = useMutation(REMOVE_TASK);\nconst [updateHabit, {}] = useMutation(UPDATE_HABIT);\nconst [formState, setFormState] =  useState({habitTitle:``,\n        notes:``,\n        description:``,\n        frequency:``,\n        startDate:``,\n        endDate:``});\n\nlet userData= data?.me || {};\nlet addTaskForm=``;\n\n\nuseEffect(() => {\n    if(!data){\n        return;\n    }\n    userData = data?.me || {};\n setFormState(\n        (id)?\n        // {habitTitle: userData.habits[id].title,\n        // description: userData.habits[id].tasks[taskId].description,\n        // frequency:userData.habits[id].tasks[taskId].frequency,\n        // startDate:userData.habits[id].tasks[taskId].startDate,\n        // endDate: userData.habits[id].tasks[taskId].endDate} : (id && taskId==='')?\n        {habitTitle:userData.habits[id].title,\n        notes:userData.habits[id].notes,\n        description:``,\n        frequency:``,\n        startDate:``,\n        endDate:``} :\n            {habitTitle:``,\n            notes:``,\n            description:``,\n            frequency:``,\n            startDate:``,\n            endDate:``}\n    )}, [data]);\n\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  const handleHabitFormSubmit = async (event) => {\n    event.preventDefault();\n    const habitToSave = {\n    title:formState.habitTitle,\n}\n\nif (!id){\n    try {\n        const { habit } = await createHabit({\n          variables: { habit: habitToSave },\n        });\n        id = data.me.habits.length;\n        document.location.replace(`/habit/${id}`);\n\n  \n      } catch (e) {\n        console.error(e);\n      }\n}\nelse if(id){\n\n    try {\n        const { habit } = await updateHabit({id,\n          variables: { \n              index: id,\n              habit: habitToSave },\n        });\n  \n      } catch (e) {\n        console.error(e);\n      }\n}\n\n  };\n\n  //Create a task\n  const handleTaskFormSubmit = async (event) => {\n    event.preventDefault();\n\n    const taskToSave = {\n        description:formState.description,\n        frequency:formState.frequency,\n        startDate:formState.startDate,\n        endDate:formState.endDate,\n\n    }\n\n    if(document.getElementById(\"addTaskForm\").className=\"Visible\"){\n        document.getElementById(\"addTaskForm\").setAttribute(\"class\",\"Hidden\");\n            visibility = \"btn-block btn-danger Visible btn btn-primary\";\n            document.getElementById(\"newTaskBtn\").setAttribute(\"class\",visibility);\n\n    }\n\n    try {\n      const { task } = await createTask({\n        variables: { \n            index: id,\n            task:taskToSave},\n      });\n\n    } catch (e) {\n      console.error(e);\n    }\n\nsetFormState(\n        {\n        description:``,\n        frequency:``,\n        startDate:``,\n        endDate:``} );\n\n        };\n\n\n  const handleDeleteTask = async (taskId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n\n      await removeTask({variables: {\n        index: id,\n        taskId: taskId}})\n\n\n      // upon success, remove task from page\n    //   removeTaskId(taskId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleEditTask = async (taskId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n\n    //   await updateTask({variables: {taskId: taskId}})\n\n\n    //   // upon success, remove task from localStorage\n    //   removeTaskId(taskId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n\n  const addNewTask = () =>{\n    let addTaskForm = document.getElementById(\"addTaskForm\");\n    addTaskForm.setAttribute(\"class\",\"Visible\");\n    visibility = \"btn-block btn-danger Hidden btn btn-primary\"\n    document.getElementById(\"newTaskBtn\").setAttribute(\"class\",visibility);\n\n  };\n  \n\n  if (loading) {\n\n    return <div>Loading...</div>;\n    \n  }\n\n\nreturn (\n<>\n\n<form onSubmit={handleHabitFormSubmit}>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Habit Title\"\n                  name=\"habitTitle\"\n                  type=\"text\"\n                  value={formState.habitTitle}\n                  onChange={handleChange}\n                />\n                <button\n                  className=\"btn btn-block btn-primary\"\n                  style={{ cursor: 'pointer' }}\n                  type=\"submit\"\n                >\n                  Save Habit\n                </button>\n              </form>\n              \n              <Button id='newTaskBtn' className={visibility} onClick={() => addNewTask()}>\n                    Add New Task\n                </Button>\n\n            <div id='addTaskForm' className=\"Hidden\">\n                <form onSubmit={handleTaskFormSubmit}>\n                    <input\n                    className=\"form-input\"\n                    placeholder=\"Task Description\"\n                    name=\"description\"\n                    type=\"text\"\n                    value={formState.description}\n                    onChange={handleChange}\n                    />\n                    <input\n                    className=\"form-input\"\n                    placeholder=\"Task Frequency\"\n                    name=\"frequency\"\n                    type=\"text\"\n                    value={formState.frequency}\n                    onChange={handleChange}\n                    />\n                    <input\n                    className=\"form-input\"\n                    placeholder=\"Task Start Date\"\n                    name=\"startDate\"\n                    type=\"date\"\n                    value={formState.startDate}\n                    onChange={handleChange}\n                    />\n                    <input\n                    className=\"form-input\"\n                    placeholder=\"TaskEndDate\"\n                    name=\"endDate\"\n                    type=\"date\"\n                    value={formState.endDate}\n                    onChange={handleChange}\n                    />\n                    <button\n                    id=\"taskBtn\"\n                    className=\"btn btn-block btn-primary\"\n                    style={{ cursor: 'pointer' }}\n                    type=\"submit\"\n                    >\n                    Save Task\n                    </button>\n                    </form>\n                </div>\n \n                <div id=\"notesForm\" className=\"Visible\" >\n                <form onSubmit={handleHabitFormSubmit}>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"notes\"\n                  name=\"notes\"\n                  type=\"message\"\n                  value={formState.notes}\n                  onChange={handleChange}\n                />\n                <button\n                  className=\"btn btn-block btn-primary\"\n                  style={{ cursor: 'pointer' }}\n                  type=\"submit\"\n                >\n                  Save Entry\n                </button>\n              </form>\n              </div>\n            {userData.habits[id]?.tasks.map((task) => {\n            return (\n\n\n              <Card key={task.taskId} border='dark'>\n                <Card.Body>\n                  <Card.Title>{task.description}</Card.Title>\n                  <Button className='btn-block btn-danger' onClick={() => handleEditTask(task.taskId)}>\n                    Edit\n                  </Button>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteTask(task.taskId)}>\n                    Delete\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n\n\n\n</>\n  \n  );\n    \n};\n\nexport default Habit;","/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/components/Navbar/Navbar.js",[],"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/components/Header/index.js",[],"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/components/Footer/index.js",[],"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/utils/mutations.js",[],"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/utils/queries.js",[],"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/utils/auth.js",[],"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/components/Habit/index.js",[],"/Users/sarahlientz/Desktop/homework/HappyHabits/client/src/components/Task/index.js",[],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":3,"column":10,"nodeType":"90","messageId":"91","endLine":3,"endColumn":19},{"ruleId":"88","severity":1,"message":"92","line":3,"column":21,"nodeType":"90","messageId":"91","endLine":3,"endColumn":30},{"ruleId":"88","severity":1,"message":"93","line":3,"column":32,"nodeType":"90","messageId":"91","endLine":3,"endColumn":43},{"ruleId":"88","severity":1,"message":"94","line":19,"column":23,"nodeType":"90","messageId":"91","endLine":19,"endColumn":28},{"ruleId":"88","severity":1,"message":"95","line":19,"column":30,"nodeType":"90","messageId":"91","endLine":19,"endColumn":35},{"ruleId":"88","severity":1,"message":"96","line":20,"column":23,"nodeType":"90","messageId":"91","endLine":20,"endColumn":27},{"ruleId":"97","severity":1,"message":"98","line":21,"column":20,"nodeType":"99","messageId":"100","endLine":21,"endColumn":22},{"ruleId":"97","severity":1,"message":"98","line":22,"column":21,"nodeType":"99","messageId":"100","endLine":22,"endColumn":23},{"ruleId":"88","severity":1,"message":"101","line":31,"column":5,"nodeType":"90","messageId":"91","endLine":31,"endColumn":16},{"ruleId":"102","severity":1,"message":"103","line":38,"column":16,"nodeType":"104","endLine":38,"endColumn":30},{"ruleId":"88","severity":1,"message":"95","line":78,"column":17,"nodeType":"90","messageId":"91","endLine":78,"endColumn":22},{"ruleId":"88","severity":1,"message":"95","line":92,"column":17,"nodeType":"90","messageId":"91","endLine":92,"endColumn":22},{"ruleId":"105","severity":1,"message":"106","line":117,"column":8,"nodeType":"107","messageId":"108","endLine":117,"endColumn":66},{"ruleId":"88","severity":1,"message":"96","line":125,"column":15,"nodeType":"90","messageId":"91","endLine":125,"endColumn":19},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"no-unused-vars","'Jumbotron' is defined but never used.","Identifier","unusedVar","'Container' is defined but never used.","'CardColumns' is defined but never used.","'error' is assigned a value but never used.","'habit' is assigned a value but never used.","'task' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'addTaskForm' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'userData' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","LogicalExpression","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","no-global-assign","no-unsafe-negation"]