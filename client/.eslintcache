[{"D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\index.js":"1","D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\App.js":"2","D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\reportWebVitals.js":"3","D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\pages\\Home.js":"4","D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\pages\\Signup.js":"5","D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\pages\\Login.js":"6","D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\pages\\Dashboard.js":"7","D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\pages\\Habit.js":"8","D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\components\\Navbar\\Navbar.js":"9","D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\components\\Header\\index.js":"10","D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\components\\Footer\\index.js":"11","D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\utils\\mutations.js":"12","D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\utils\\queries.js":"13","D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\utils\\auth.js":"14","D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\components\\Habit\\index.js":"15","D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\components\\Task\\index.js":"16","D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\utils\\userProvider.js":"17"},{"size":500,"mtime":1648593991388,"results":"18","hashOfConfig":"19"},{"size":2228,"mtime":1649570840279,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1648593991390,"results":"21","hashOfConfig":"19"},{"size":306,"mtime":1649540053703,"results":"22","hashOfConfig":"19"},{"size":2665,"mtime":1649540053704,"results":"23","hashOfConfig":"19"},{"size":2638,"mtime":1649570817761,"results":"24","hashOfConfig":"19"},{"size":1081,"mtime":1649540053703,"results":"25","hashOfConfig":"19"},{"size":8448,"mtime":1649561264604,"results":"26","hashOfConfig":"19"},{"size":1159,"mtime":1649540053701,"results":"27","hashOfConfig":"19"},{"size":1273,"mtime":1649569541796,"results":"28","hashOfConfig":"19"},{"size":800,"mtime":1649540053699,"results":"29","hashOfConfig":"19"},{"size":3301,"mtime":1649561264605,"results":"30","hashOfConfig":"19"},{"size":1266,"mtime":1649561264605,"results":"31","hashOfConfig":"19"},{"size":1866,"mtime":1649561264605,"results":"32","hashOfConfig":"19"},{"size":551,"mtime":1649561264602,"results":"33","hashOfConfig":"19"},{"size":1016,"mtime":1649561264603,"results":"34","hashOfConfig":"19"},{"size":480,"mtime":1649570731970,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"xwmakv",{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\index.js",[],["76","77"],"D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\App.js",["78"],"import React, { useContext } from \"react\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\n// import UserProvider from \"./utils/userProvider\";\nimport Home from \"./pages/Home\";\nimport Signup from \"./pages/Signup\";\nimport Login from \"./pages/Login\";\nimport Dashboard from \"./pages/Dashboard\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Habit from \"./pages/Habit\";\n\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem(\"id_token\");\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"flex-column justify-flex-start min-100-vh\">\n          {/* <UserProvider> */}\n          <Navbar />\n          <Header />\n          <div className=\"container\">\n            <Routes>\n              <Route path=\"/\" element={<Home />} />\n              <Route path=\"/login\" element={<Login />} />\n              <Route path=\"/signup\" element={<Signup />} />\n              <Route path=\"/habit/:id\" element={<Habit />} />\n              <Route path=\"/habit\" element={<Habit />} />\n              <Route path=\"/dashboard\" element={<Dashboard />} />\n            </Routes>\n          </div>\n          <Footer />\n          {/* </UserProvider> */}\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\reportWebVitals.js",[],"D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\pages\\Home.js",[],"D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\pages\\Signup.js",[],"D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\pages\\Login.js",[],"D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\pages\\Dashboard.js",["79"],"import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Habit from \"../components/Habit\";\n\nconst habits = [\n  {\n    id: \"134otyb1234oiuyt103\",\n    title: \"My first habit to change\",\n    status: \"Active\",\n    notes: \"I'm not sure how to progress my first habit!\",\n    createdDate: \"4/6/2022\",\n    tasks: [\n      {\n        description: \"Task 1\",\n        frequency: \"Daily\",\n      },\n      {\n        description: \"Task 2\",\n        frequency: \"Weekly\",\n      },\n    ],\n  },\n  {\n    id: \"134oiutb13o4t\",\n    title: \"My second habit to change\",\n    status: \"Active\",\n    notes: \"I'm not sure how to progress my first habit!\",\n    createdDate: \"4/6/2022\",\n    tasks: [\n      {\n        description: \"Task 1\",\n        frequency: \"Daily\",\n      },\n      {\n        description: \"Task 2\",\n        frequency: \"Weekly\",\n      },\n    ],\n  },\n];\n\nconst Dashboard = () => {\n  return (\n    <div>\n      <h1>Habit-forming Activities:</h1>\n\n      {habits.map((habit) => {\n        return <Habit key={habit.id} value={habit} />;\n      })}\n    </div>\n  );\n};\n\nexport default Dashboard;\n","D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\pages\\Habit.js",["80","81","82","83","84","85","86","87","88","89","90","91","92","93"],"import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { useParams } from 'react-router-dom';\nimport {QUERY_ME} from '../utils/queries';\nimport {CREATE_HABIT, REMOVE_TASK, CREATE_TASK, UPDATE_HABIT} from '../utils/mutations';\n\nimport Auth from \"../utils/auth\";\n\nconst Habit = () => {\nconst { loading, data } = useQuery(QUERY_ME);\nlet { id } = useParams();\nlet visibility = \"btn-block btn-danger Visible btn btn-primary\"\nif(!id){\n    visibility = \"btn-block btn-danger Hidden btn btn-primary\"\n\n} \n\nconst [createHabit, { error, habit }] = useMutation(CREATE_HABIT);\nconst [createTask, {  task }] = useMutation(CREATE_TASK);\nconst [removeTask, {}] = useMutation(REMOVE_TASK);\nconst [updateHabit, {}] = useMutation(UPDATE_HABIT);\nconst [formState, setFormState] =  useState({habitTitle:``,\n        notes:``,\n        description:``,\n        frequency:``,\n        startDate:``,\n        endDate:``});\n\nlet userData= data?.me || {};\nlet addTaskForm=``;\n\n\nuseEffect(() => {\n    if(!data){\n        return;\n    }\n    userData = data?.me || {};\n setFormState(\n        (id)?\n        // {habitTitle: userData.habits[id].title,\n        // description: userData.habits[id].tasks[taskId].description,\n        // frequency:userData.habits[id].tasks[taskId].frequency,\n        // startDate:userData.habits[id].tasks[taskId].startDate,\n        // endDate: userData.habits[id].tasks[taskId].endDate} : (id && taskId==='')?\n        {habitTitle:userData.habits[id].title,\n        notes:userData.habits[id].notes,\n        description:``,\n        frequency:``,\n        startDate:``,\n        endDate:``} :\n            {habitTitle:``,\n            notes:``,\n            description:``,\n            frequency:``,\n            startDate:``,\n            endDate:``}\n    )}, [data]);\n\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  const handleHabitFormSubmit = async (event) => {\n    event.preventDefault();\n    const habitToSave = {\n    title:formState.habitTitle,\n}\n\nif (!id){\n    try {\n        const { habit } = await createHabit({\n          variables: { habit: habitToSave },\n        });\n        id = data.me.habits.length;\n        document.location.replace(`/habit/${id}`);\n\n  \n      } catch (e) {\n        console.error(e);\n      }\n}\nelse if(id){\n\n    try {\n        const { habit } = await updateHabit({id,\n          variables: { \n              index: id,\n              habit: habitToSave },\n        });\n  \n      } catch (e) {\n        console.error(e);\n      }\n}\n\n  };\n\n  //Create a task\n  const handleTaskFormSubmit = async (event) => {\n    event.preventDefault();\n\n    const taskToSave = {\n        description:formState.description,\n        frequency:formState.frequency,\n        startDate:formState.startDate,\n        endDate:formState.endDate,\n\n    }\n\n    if(document.getElementById(\"addTaskForm\").className=\"Visible\"){\n        document.getElementById(\"addTaskForm\").setAttribute(\"class\",\"Hidden\");\n            visibility = \"btn-block btn-danger Visible btn btn-primary\";\n            document.getElementById(\"newTaskBtn\").setAttribute(\"class\",visibility);\n\n    }\n\n    try {\n      const { task } = await createTask({\n        variables: { \n            index: id,\n            task:taskToSave},\n      });\n\n    } catch (e) {\n      console.error(e);\n    }\n\nsetFormState(\n        {\n        description:``,\n        frequency:``,\n        startDate:``,\n        endDate:``} );\n\n        };\n\n\n  const handleDeleteTask = async (taskId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n\n      await removeTask({variables: {\n        index: id,\n        taskId: taskId}})\n\n\n      // upon success, remove task from page\n    //   removeTaskId(taskId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleEditTask = async (taskId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n\n    //   await updateTask({variables: {taskId: taskId}})\n\n\n    //   // upon success, remove task from localStorage\n    //   removeTaskId(taskId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n\n  const addNewTask = () =>{\n    let addTaskForm = document.getElementById(\"addTaskForm\");\n    addTaskForm.setAttribute(\"class\",\"Visible\");\n    visibility = \"btn-block btn-danger Hidden btn btn-primary\"\n    document.getElementById(\"newTaskBtn\").setAttribute(\"class\",visibility);\n\n  };\n  \n\n  if (loading) {\n\n    return <div>Loading...</div>;\n    \n  }\n\n\nreturn (\n<>\n\n<form onSubmit={handleHabitFormSubmit}>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Habit Title\"\n                  name=\"habitTitle\"\n                  type=\"text\"\n                  value={formState.habitTitle}\n                  onChange={handleChange}\n                />\n                <button\n                  className=\"btn btn-block btn-primary\"\n                  style={{ cursor: 'pointer' }}\n                  type=\"submit\"\n                >\n                  Save Habit\n                </button>\n              </form>\n              \n              <Button id='newTaskBtn' className={visibility} onClick={() => addNewTask()}>\n                    Add New Task\n                </Button>\n\n            <div id='addTaskForm' className=\"Hidden\">\n                <form onSubmit={handleTaskFormSubmit}>\n                    <input\n                    className=\"form-input\"\n                    placeholder=\"Task Description\"\n                    name=\"description\"\n                    type=\"text\"\n                    value={formState.description}\n                    onChange={handleChange}\n                    />\n                    <input\n                    className=\"form-input\"\n                    placeholder=\"Task Frequency\"\n                    name=\"frequency\"\n                    type=\"text\"\n                    value={formState.frequency}\n                    onChange={handleChange}\n                    />\n                    <input\n                    className=\"form-input\"\n                    placeholder=\"Task Start Date\"\n                    name=\"startDate\"\n                    type=\"date\"\n                    value={formState.startDate}\n                    onChange={handleChange}\n                    />\n                    <input\n                    className=\"form-input\"\n                    placeholder=\"TaskEndDate\"\n                    name=\"endDate\"\n                    type=\"date\"\n                    value={formState.endDate}\n                    onChange={handleChange}\n                    />\n                    <button\n                    id=\"taskBtn\"\n                    className=\"btn btn-block btn-primary\"\n                    style={{ cursor: 'pointer' }}\n                    type=\"submit\"\n                    >\n                    Save Task\n                    </button>\n                    </form>\n                </div>\n \n                <div id=\"notesForm\" className=\"Visible\" >\n                <form onSubmit={handleHabitFormSubmit}>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"notes\"\n                  name=\"notes\"\n                  type=\"message\"\n                  value={formState.notes}\n                  onChange={handleChange}\n                />\n                <button\n                  className=\"btn btn-block btn-primary\"\n                  style={{ cursor: 'pointer' }}\n                  type=\"submit\"\n                >\n                  Save Entry\n                </button>\n              </form>\n              </div>\n            {userData.habits[id]?.tasks.map((task) => {\n            return (\n\n\n              <Card key={task.taskId} border='dark'>\n                <Card.Body>\n                  <Card.Title>{task.description}</Card.Title>\n                  <Button className='btn-block btn-danger' onClick={() => handleEditTask(task.taskId)}>\n                    Edit\n                  </Button>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteTask(task.taskId)}>\n                    Delete\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n\n\n\n</>\n  \n  );\n    \n};\n\nexport default Habit;","D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\components\\Navbar\\Navbar.js",[],"D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\components\\Header\\index.js",["94","95"],"import React, { useState, useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./header.css\";\nimport Auth from \"../../utils/auth\";\n\nconst Header = () => {\n  const logout = (event) => {\n    event.preventDefault();\n    Auth.logout();\n  };\n\n  return (\n    <header className=\"container header__container\">\n      <div className=\"container flex-row justify-space-between-lg justify-center align-center\">\n        <div>\n          <h5>Welcome to</h5>\n          <Link className=\"text-light\" to=\"/\">\n            <h1 className=\"m-0\">Happy Habits</h1>\n          </Link>\n          <p className=\"m-0\">Little changes, big results.</p>\n        </div>\n        <div className=\"cta\">\n          {Auth.loggedIn() ? (\n            <>\n              <span>Hey there, {Auth.getProfile().data.username}!</span>\n              <button className=\"btn\" onClick={logout}>\n                Logout\n              </button>\n            </>\n          ) : (\n            <>\n              <Link className=\"btn\" id=\"loginbtn\" to=\"/login\">\n                Login\n              </Link>\n              <Link className=\"btn btn-primary\" to=\"/signup\">\n                Signup\n              </Link>\n            </>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\components\\Footer\\index.js",[],"D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\utils\\mutations.js",[],"D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\utils\\queries.js",[],"D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\utils\\auth.js",[],"D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\components\\Habit\\index.js",["96"],"import \"./habit.css\";\nimport Task from \"../Task\";\nimport Form from \"react-bootstrap\";\n\nconst Habit = (props) => {\n  if (!props.value) return;\n  return (\n    <div className=\"habit-card\">\n      <div className=\"habit-title\">{props.value.title}</div>\n      <div className=\"habit-body\">\n        {/* <Task value={props.value.tasks[0]} /> */}\n        {props.value?.tasks.map((task, index) => {\n          return <Task key={index} value={task} />;\n          //   return <p>Here's a task </p>;\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Habit;\n","D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\components\\Task\\index.js",[],"D:\\GA Tech Bootcamp\\git-repositories\\HappyHabits\\client\\src\\utils\\userProvider.js",[],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":1,"column":17,"nodeType":"103","messageId":"104","endLine":1,"endColumn":27},{"ruleId":"101","severity":1,"message":"105","line":2,"column":10,"nodeType":"103","messageId":"104","endLine":2,"endColumn":14},{"ruleId":"101","severity":1,"message":"106","line":3,"column":10,"nodeType":"103","messageId":"104","endLine":3,"endColumn":19},{"ruleId":"101","severity":1,"message":"107","line":3,"column":21,"nodeType":"103","messageId":"104","endLine":3,"endColumn":30},{"ruleId":"101","severity":1,"message":"108","line":3,"column":32,"nodeType":"103","messageId":"104","endLine":3,"endColumn":43},{"ruleId":"101","severity":1,"message":"109","line":19,"column":23,"nodeType":"103","messageId":"104","endLine":19,"endColumn":28},{"ruleId":"101","severity":1,"message":"110","line":19,"column":30,"nodeType":"103","messageId":"104","endLine":19,"endColumn":35},{"ruleId":"101","severity":1,"message":"111","line":20,"column":23,"nodeType":"103","messageId":"104","endLine":20,"endColumn":27},{"ruleId":"112","severity":1,"message":"113","line":21,"column":20,"nodeType":"114","messageId":"115","endLine":21,"endColumn":22},{"ruleId":"112","severity":1,"message":"113","line":22,"column":21,"nodeType":"114","messageId":"115","endLine":22,"endColumn":23},{"ruleId":"101","severity":1,"message":"116","line":31,"column":5,"nodeType":"103","messageId":"104","endLine":31,"endColumn":16},{"ruleId":"117","severity":1,"message":"118","line":38,"column":16,"nodeType":"119","endLine":38,"endColumn":30},{"ruleId":"101","severity":1,"message":"110","line":78,"column":17,"nodeType":"103","messageId":"104","endLine":78,"endColumn":22},{"ruleId":"101","severity":1,"message":"110","line":92,"column":17,"nodeType":"103","messageId":"104","endLine":92,"endColumn":22},{"ruleId":"120","severity":1,"message":"121","line":117,"column":8,"nodeType":"122","messageId":"123","endLine":117,"endColumn":66},{"ruleId":"101","severity":1,"message":"111","line":125,"column":15,"nodeType":"103","messageId":"104","endLine":125,"endColumn":19},{"ruleId":"101","severity":1,"message":"124","line":1,"column":17,"nodeType":"103","messageId":"104","endLine":1,"endColumn":25},{"ruleId":"101","severity":1,"message":"102","line":1,"column":27,"nodeType":"103","messageId":"104","endLine":1,"endColumn":37},{"ruleId":"101","severity":1,"message":"125","line":3,"column":8,"nodeType":"103","messageId":"104","endLine":3,"endColumn":12},"no-native-reassign",["126"],"no-negated-in-lhs",["127"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Jumbotron' is defined but never used.","'Container' is defined but never used.","'CardColumns' is defined but never used.","'error' is assigned a value but never used.","'habit' is assigned a value but never used.","'task' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'addTaskForm' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'userData' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","LogicalExpression","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'useState' is defined but never used.","'Form' is defined but never used.","no-global-assign","no-unsafe-negation"]